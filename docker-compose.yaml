services:
  db:
    container_name: starburger_db
    image: postgres:17.4-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    container_name: starburger_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
    ports:
      - "80:80"
    depends_on:
      - backend

  backend:
    container_name: starburger_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/opt/star-burger/staticfiles
      - media_volume:/opt/star-burger/media
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-postgres}
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
    command: bash -c "python manage.py migrate && gunicorn --workers 3 --bind 0.0.0.0:8000 star_burger.wsgi:application"
    restart: always

volumes:
  db_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
